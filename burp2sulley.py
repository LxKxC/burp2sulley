#!/usr/bin/env python
# Title: HTTPFuzz 
# Author: lucyoa

import sys
import base64
from xml.dom import minidom


def banner():
	print "Awesome HTTP fuzz template generator for Sulley!"
	print "Usage: %s <name> <action:GET/POST/COOKIES> <sens level:1,2> <burp.xml file>" % sys.argv[0]
	sys.exit(0)


def prepare_cookies(request, level):
	request = base64.b64decode(request)
	newreq = ""

	if request.find("Cookie") == -1:
		return ""

	for line in request.split("\r\n"):
		if line[:8] == "Cookie: ":
			newreq += 's_static("Cookie: ")\n'

			variables = line[8:].split(";")
			num = len(variables)

			for i in range(0, num):
				tmp = variables[i]
				key = tmp[:tmp.find("=")]
				value = tmp[tmp.find("=")+1:]

				tmp = 's_static("'+key+'=")\n'
				newreq += tmp

				tmp = 's_string("'+value+'")\n'
				newreq += tmp

				if level == 1:
					newreq += 's_delim(";")\n'
				elif level == 2:
					newreq += 's_static(";")\n'

			newreq += 's_static("\\r\\n")\n'

		else:
			if line != "":
				newreq += 's_static("'+line+'\\r\\n")\n'

	newreq += 's_static("\\r\\n")\n\n'
	return newreq


def prepare_post(request, level):
	request = base64.b64decode(request)
	newreq = ""

	if request[:4] != "POST":
		return ""

	lines = request.split("\r\n")
	for j in range(0, len(lines)):
		if lines[j][:16] == "Content-Length: ":
			newreq += 's_static("Content-Length: ")\n'
			newreq += 's_size("postbody", format="ascii")\n'
			newreq += 's_static("\\r\\n")\n'

		elif j == len(lines)-1:
			query = lines[j]			
			variables = query.split("&")

			newreq += 'if s_block_start("postbody"):\n'
			
			num = len(variables)
			for i in range(0, num):
				key, value = variables[i].split("=")
				
				tmp = '\ts_static("'+key+'=")\n'
				newreq += tmp

				tmp = '\ts_string("'+value+'")\n'

				if i < num-1:
					if level == 1:
						tmp += '\ts_delim("&")\n'
					elif level == 2:
						tmp += '\ts_static("&")\n'

				newreq += tmp

			newreq += 's_block_end()\n'
		else:
			if lines[j] != "":
				newreq += 's_static("'+lines[j]+'\\r\\n")\n'
			else:
				newreq += 's_static("\\r\\n")\n'
	return newreq


def prepare_get(request, level):
	request = base64.b64decode(request)
	newreq = ""
	
	if request[:3] != "GET":
		return ""

	for line in request.split("\r\n"):
		if line[:3] == "GET":
			tmp = line[:line.find("?")+1]
			newreq += 's_static("'+tmp+'")\n'
			
			variables = line[line.find("?")+1:line.find(" HTTP")].split("&")

			num = len(variables)
			for i in range(0, num):
				key, value = variables[i].split("=")

				tmp = 's_static("'+key+'=")\n'
				newreq += tmp

				tmp = 's_string("'+value+'")\n'

				if i < num-1:
					if level == 1:
						tmp += 's_delim("&")\n'
					elif level == 2:
						tmp += 's_static("&")\n'

				newreq += tmp

			if level == 1:
				newreq += 's_delim(" ")\n'
			elif level == 2:
				newreq += 's_static(" ")\n'

			tmp = line[line.find("HTTP"):]

			newreq += 's_static("'+tmp+'\\r\\n")\n'

		else:
			if line != "":
				newreq += 's_static("'+line+'\\r\\n")\n'

	newreq += 's_static("\\r\\n")\n\n'
	return newreq


def save(filename, content):
	filename = 'outputs/'+filename

	f = open(filename, 'w+')
	f.write(content)
	f.close()


def action_get(items, level):
	content = """# Request file generated by HTTPFuzz
from sulley import *\n\n"""

	for i in range(0, len(items)):
		body = ""
		request = items[i].getElementsByTagName('request')[0].childNodes[0].toxml()[9:-3]
		body += 's_initialize("GET REQUEST ' + str(i) + '")\n'
		body += prepare_get(request, level)
		content += body
	return content

def action_post(items, level):
	content = """# Request file generated by HTTPFuzz	
from sulley import *\n\n"""

	for i in range(0, len(items)):
		body = ""
		request = items[i].getElementsByTagName('request')[0].childNodes[0].toxml()[9:-3]

		
		res = prepare_post(request, level)
		if res != "":
			body += 's_initialize("POST REQUEST ' + str(i) + '")\n'
			body += res

		content += body
	return content
	
def action_cookies(items, level):
	content = """# Request file generated by HTTPFuzz
from sulley import *\n\n"""

	for i in range(0, len(items)):
		body = ""
		request = items[i].getElementsByTagName('request')[0].childNodes[0].toxml()[9:-3]
		body += 's_initialize("COOKIE REQUEST ' + str(i) + '")\n'
		body += prepare_cookies(request, level)
		content += body
	return content


def main():
	if len(sys.argv) != 5:
		banner()

	name = sys.argv[1]
	action = sys.argv[2]
	level = int(sys.argv[3])
	burpfile = sys.argv[4]

	xmldoc = minidom.parse(burpfile)
	items = xmldoc.getElementsByTagName('item')

	# generate request file
	if action == "GET":
		content = action_get(items, level)
	elif action == "POST":
		content = action_post(items, level)
	elif action == "COOKIES":
		content = action_cookies(items, level)
	else:
		banner()

	save(name+'_request.py', content)

	# generate session file
	content = """# Session file generated by HTTPFuzz
from sulley import *
from requests import %s_request

def init_message (sock):
	init = 'GET /index.html HTML/1.1\\r\\n\\r\\n'

sess = sessions.session(session_filename="audits/%s.session")

target = sessions.target("XXX.XXX.XXX.XXX", 80)
target.netmon = pedrpc.client("XXX.XXX.XXX.XXX", 26001)
target.procmon = pedrpc.client("XXX.XXX.XXX.XXX", 26002)

target.procmon_options = {
"proc_name": "XXXXX.exe",
"stop_commands": ['wmic process where (name="XXXXX.exe") delete'],
"start_commands": ['"C:\\Path\\to\\executable\\XXXXX.exe"'],
}

sess.add_target(target)
sess.pre_send = init_message\n
""" % (name, name)

	for i in range(0, len(items)):
		content += 'sess.connect(sess.root, s_get("'+action+' REQUEST ' +str(i)+'"))\n'

	content += "sess.fuzz()\n"
	save(name+'_sess.py', content)

if __name__ == "__main__":
	main()
